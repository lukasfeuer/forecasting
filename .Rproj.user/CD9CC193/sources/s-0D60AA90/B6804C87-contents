---
title: "Notes | Forecasting: Principles and Practice"
author: "Lukas Feuer"
date: "04.02.2022"
output: 
  html_document:
    theme: darkly
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(fpp3)
```

***
You find the book online [here](https://otexts.com/fpp3/).

***

## 1 Getting Started

The predictability of an event or a quantity depends on several factors including:

 1. how well we understand the factors that contribute to it;
 2. how much data is available;
 3. how similar the future is to the past;
 4. whether the forecasts can affect the thing we are trying to forecast.
 
* Often in forecasting, a key step is knowing when something can be forecast accurately, and when forecasts will be no better than tossing a coin. 
* Modern organisations require short-term, medium-term and long-term forecasts, depending on the specific application.
* Prediction Intervals: The dark shaded region shows 80% prediction intervals. That is, each future value is expected to lie in the dark shaded region with a probability of 80%. The light shaded region shows 95% prediction intervals. These prediction intervals are a useful way of displaying the uncertainty in forecasts. 

A forecasting task usually involves five basic steps.

  *  Step 1: Problem definition.
  *  Step 2: Gathering information.
  *  Step 3: Preliminary (exploratory) analysis.
  *  Step 4: Choosing and fitting models.
  *  Step 5: Using and evaluating a forecasting model.

The statistical perspective:

* The thing we are trying to forecast is unknown (or we would not be forecasting it), and so we can think of it as a random variable. 
* The set of values that this random variable could take, along with their relative probabilities, is known as the “probability distribution” of y~t~|I. In forecasting, we call this the forecast distribution.


## 2 Time series graphics

The seasonal period is the number of observations before the seasonal pattern repeats:

| Data	  |Minute	  |Hour   	|Day    	|Week   	|Year     |
|---------|---------|---------|---------|---------|---------|
| Quarters|	        |         |   			|         |	4 |
| Months	|	        |         |   		  |  	      | 12|
| Weeks		|	        |         |   		  |         | 52|
| Days		|	        |         |   	    |   7	    | 365.25|
| Hours		|	        |         |   24	  |  168	  | 8766|
| Minutes	|	        |60	      |   1440	| 10080	  | 525960|
| Seconds	|  60	    |3600     |	86400	  |  604800 |31557600|

```{r}
melsyd_economy <- ansett %>%
  filter(Airports == "MEL-SYD", Class == "Economy") %>%
  mutate(Passengers = Passengers / 1000)

autoplot(melsyd_economy, Passengers) +
  labs(title = "Ansett airlines economy class",
       subtitle = "Melbourne-Sydney",
       y = "Passengers ('000)")
# plotly::ggplotly()
```

### Time series patterns

* *Trend*: long term increase/decrease, does not have to be linear
* *Seasonal*: regular pattern **always of a fixed and known period** 
* *Cyclic*: data sising and falling not caused by a fixed frequency --> e.g. the business cycle; usually at least 2 years 
--> average length of cycles is longer than the length of a seasonal pattern, and the magnitudes of cycles tend to be more variable than the magnitudes of seasonal patterns.
--> When choosing a forecasting method, we will first need to identify the time series patterns in the data, and then choose a method that is able to capture the patterns properly.

### Seasonal plots

* seasonal plot is similar to a time plot except that the data are plotted against the individual “seasons” in which the data were observed.
* allows the underlying seasonal pattern to be seen more clearly, and is especially useful in identifying years in which the pattern changes
* Where the data has more than one seasonal pattern, the `period` argument can be used to select which seasonal plot is required.
```{r}
PBS %>%
  filter(ATC2 == "A10") %>%
  select(Month, Concession, Type, Cost) %>%
  summarise(TotalC = sum(Cost)) %>%
  mutate(Cost = TotalC / 1e6) -> a10
a10 %>%
  gg_season(Cost, labels = "both") +
  labs(y = "$ (millions)",
       title = "Seasonal plot: Antidiabetic drug sales")
```

* An alternative plot that emphasises the seasonal patterns is where the data for each season are collected together in separate mini time plots.
* It is especially useful in identifying changes within particular seasons
```{r}
a10 %>%
  gg_subseries(Cost) +
  labs(y = "$ (millions)", title = "Australian antidiabetic drug sales")
```

* Correlation as a measure of *linear* relationship --> misleading for non-linear realtionships 
* if possible, plot all predictor variables against each other 
* note: facet_grid on one categorical variable puts "headers" to the sides --> makes it better to read compared to faced_wrap 
```{r message=FALSE}
visitors <- tourism %>%
  group_by(State) %>%
  summarise(Trips = sum(Trips))

visitors %>%
  pivot_wider(values_from=Trips, names_from=State) %>%
  GGally::ggpairs(columns = 2:9)
# Also creates a nice print-output 
# On the diagonal are shown density plots.
```

* **lag plots**: 
    * where the horizontal axis shows lagged values of the time series
    * Here the colours indicate the quarter of the variable on the vertical axis. The relationship is strongly positive at lags 4 and 8, reflecting the strong seasonality in the data. The negative relationship seen for lags 2 and 6 occurs because peaks (in Q4) are plotted against troughs (in Q2)
```{r}
recent_production <- aus_production %>%
  filter(year(Quarter) >= 2000)
recent_production %>%
  gg_lag(Beer, geom = "point") +
  labs(x = "lag(Beer, k)")
```

* **Autocorrelation**: 
    * Just as correlation measures the extent of a linear relationship between two variables, autocorrelation measures the linear relationship between lagged values of a time series.
    * There are several autocorrelation coefficients, corresponding to each panel in the lag plot.
    * The autocorrelation coefficients make up the **autocorrelation function or ACF** --> `ACF()`
    * We usually plot the ACF to see how the correlations change with the lag k
    * The dashed blue lines indicate whether the correlations are significantly different from zero
```{r}
recent_production %>% 
  ACF(Beer, lag_max = 9)

recent_production %>%
  ACF(Beer) %>%
  autoplot() + labs(title="Australian beer production")
```

* **Trend**: autocorrelations for small lags tend to be large and positive because observations nearby in time are also nearby in value. So the ACF of a trended time series tends to have positive values that slowly decrease as the lags increase.
* **Seasonal**: autocorrelations will be larger for the seasonal lags (at multiples of the seasonal period) than for other lags.
--> When data are both trended and seasonal, you see a combination of these effects.

* **White Noise**: Time series that show no autocorrelation --> we expect each autocorrelation to be close to zero


## 3 Time series decomposition

* We usually combine the trend and cycle into a single *trend-cycle*  component (often just called the trend for simplicity). 
* Thus we can think of a time series as comprising three components: 
    * a *trend-cycle* component
    * a *seasonal* component
    * a *remainder* component (containing anything else in the time series)
* there can be more than one seasonal component
* When decomposing a time series, it is sometimes helpful to first transform or adjust the series in order to make the decomposition 

### Transformation

* four kinds of adjustments: calendar adjustments, population adjustments, inflation adjustments and mathematical transformations
* simplify the patterns in the historical data by removing known sources of variation, or by making the pattern more consistent across the whole data set
* **Calendar** Adjustment 
    * e.g. total monthly sales in a retail store, there will be variation between the months simply because of the different numbers of trading days in each month
    * remove this variation by computing average sales per trading day in each month, rather than total sales in the month
* **Population** Adjustment
    * For most data that are affected by population changes, it is best to use per-capita data rather than the totals
```{r}
global_economy %>%
  filter(Country == "Australia") %>%
  autoplot(GDP/Population) +
  labs(title= "GDP per capita", y = "$US")
```

* **Inflation** Adjustment
    * For data which are affected by the value of money (e.g. average cost of a new house) --> adjustments via a *price index*
    * financial time series are usually adjusted so that all values are stated in dollar values from a particular year
    * Price indexes are often constructed by government agencies
    For consumer goods, a common price index is the Consumer Price Index (or CPI)
```{r warning=FALSE, include=FALSE}
print_retail <- aus_retail %>%
  filter(Industry == "Newspaper and book retailing") %>%
  group_by(Industry) %>%
  index_by(Year = year(Month)) %>%
  summarise(Turnover = sum(Turnover))
aus_economy <- global_economy %>%
  filter(Code == "AUS")
```
```{r warning=FALSE}
print_retail %>%
  left_join(aus_economy, by = "Year") %>%
  mutate(Adjusted_turnover = Turnover / CPI * 100) %>%
  pivot_longer(c(Turnover, Adjusted_turnover),
               values_to = "Turnover") %>%
  mutate(name = factor(name,
         levels=c("Turnover","Adjusted_turnover"))) %>%
  ggplot(aes(x = Year, y = Turnover)) +
  geom_line() +
  facet_grid(name ~ ., scales = "free_y") +
  labs(title = "Turnover: Australian print media industry",
       y = "$AU")
```

* **Mathematical** transformations
    * If the data shows variation that increases or decreases with the level of the series
    * Logarithms are useful because they are interpretable: changes in a log value are relative (or percentage) changes on the original scale
    * power transformations: square roots and cube roots
    * **Box-Cox transformations**: 
        *  includes both logarithms and power transformations
        * depend on the parameter λ
        *  allows for negative values of y~t~ provided λ > 0
        * if λ = 0 natural logarithms are used, but if λ ≠ 0, a power transformation is used
        * If λ=1, then w~t~=y~t~ −1, so the transformed data is shifted downwards but there is no change in the shape of the time series. For all other values of λ, the time series will change shape.
        * A good value of λ is one which makes the size of the seasonal variation about the same across the whole series
        * `guerrero` feature can be used to choose a value of lambda
```{r}
lambda <- aus_production %>%
  features(Gas, features = guerrero) %>%
  pull(lambda_guerrero)
aus_production %>%
  autoplot(box_cox(Gas, lambda))# +
  #labs(y = "",
  #     title = latex2exp::TeX(paste0(
  #       "Transformed gas production with $\\lambda$ = ",
  #       round(lambda,2))))
```

